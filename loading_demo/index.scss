$hex-col: rgba(255,0,12,0.2);
$hex-size: 40px;
$sqrt3: 1.73205;
$fade-time: 2.8s;
//用了泰勒展开式…………赢了
@function pi() {
  @return 3.14159265359;
}

@function fact($number) {
  $value: 1;
  @if $number > 0 {
    @for $i from 1 through $number {
      $value: $value * $i;
    }
  }
  @return $value;
}

@function pow($number, $exp) {
  $value: 1;
  @if $exp > 0 {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value;
}

@function rad($angle) {
  $unit: unit($angle);
  $unitless: $angle / ($angle * 0 + 1);

  @if $unit == deg {
    $unitless: $unitless / 180 * pi();
  }
  @return $unitless;
}

@function sin($angle) {
  $sin: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $sin: $sin + pow(-1, $i) * pow($angle, (2 * $i + 1)) / fact(2 * $i + 1);
  }
  @return $sin;
}

@function cos($angle) {
  $cos: 0;
  $angle: rad($angle);
  // Iterate a bunch of times.
  @for $i from 0 through 10 {
    $cos: $cos + pow(-1, $i) * pow($angle, 2 * $i) / fact(2 * $i);
  }
  @return $cos;
}

@function tan($angle) {
  @return sin($angle) / cos($angle);
}





@mixin getPos{
	$angle: 30deg;
	$len: $hex-size * $sqrt3 + 5;
	$top: 150px - $hex-size / 2;
	$left: 150px - $hex-size * $sqrt3 / 2;

	.hex:nth-child(7){
		top: $top; left: $left;
		opacity: 0;
		animation: fadingCenter $fade-time $fade-time / 14 * 5 infinite;
	}

	@for $i from 1 to 7 {
		.hex:nth-child(#{$i}){
			transform: scale(0.1, 0.1);
			opacity: 0;
			top: $top - $len * cos($angle);
			left: $left - $len * sin($angle);
			animation: fading $fade-time $fade-time/14 * ($i - 1) - $fade-time/10 infinite;
		}
		$angle: $angle + 60;
	}
} 
// 之前发生六边形的显隐不太对，原来是形状不能过渡一个周期，而应该在一个周期之前就完成，于是加了20%，提前到达状态，貌似就挺对的了
@keyframes fading
{
	0%{
		opacity: 0;
		transform: scale(0.1, 0.1);
	}
	20%{
		opacity: 1;
		transform: scale(1,1);
	}
	50%{
		opacity: 1;
		transform: scale(1,1);
	}
	70%{
		opacity: 0;
		transform: scale(0.1, 0.1);
	}
	// 50%{
	// 	opacity: 0;
	// 	transform: scale(0.1,0.1);
	// }
	100%{
		opacity: 0;
		transform: scale(0.1, 0.1);
	}
}
@keyframes fadingCenter
{
	0%{
		opacity: 0;
		// transform: scale(0.1, 0.1);
	}
	40%{
		opacity: 1;
		// transform: scale(1, 1);
	}
	80%{
		opacity: 0;
	}
}
@keyframes myRotate
{
	0%{
		transform: rotate(0deg);
		clip:rect(0 100px 100px 0);
	}
	50%{
		clip:rect(0 150px 150px 0);
	}
	100%{
		transform:  rotate(-360deg);
		clip:rect(0 100px 100px 0);
	}
}
@keyframes myRotate2
{
	0%{
		transform: rotate(0deg);
		clip:rect(0 100px 240px 0);
	}
	50%{
		// transform:  rotate(180deg);
		clip:rect(0 0 240px 0);

	}
	100%{
		transform:  rotate(-360deg);
		clip:rect(0 100px 240px 0);

	}
}
*{padding:0; margin:0;}
.container
{
	width: 300px;
	height: 300px;
	border: 5px solid rgba(255,0,12,0.1);
	position: absolute;
	top: 50px; left: 100px;
	border-radius: 50%;
	&:after, &:before
	{
		content: "";
		position: absolute;
		box-sizing: border-box;
		width: calc(100% + 10px); height: calc(100% + 10px);
		top:-5px; left:-5px;
		border-radius: 50%;
	}
	&:after
	{
		border: 5px solid rgba(255,0,12,0.5);
		clip:rect(0 100px 100px 0);
		animation: myRotate $fade-time linear infinite;
	}
	&:before
	{
		border: 5px solid rgba(255,0,12,0.4);
		clip:rect(0 100px 240px 0);
		animation: myRotate2 $fade-time/2 linear infinite;
	}
	.hex
	{
		height: $hex-size;
		width: $hex-size * $sqrt3;
		position: absolute;
		background-color: $hex-col;
		&:before, &:after
		{
			content:"";
			width: 0; height: 0;
			border-width: $hex-size / 2 $hex-size * $sqrt3 / 2 ;
			border-color: transparent;
			border-style: solid;
			position: absolute;
			left: 0;
		}
		&:before
		{
			border-bottom-color: $hex-col;
			bottom:100%;
		}
		&:after
		{
			border-top-color: $hex-col;
			top:100%;
		}
	}
	@include getPos;
}